#!/usr/bin/env python3

import argparse
import subprocess
import os
import sys

from util import get_filename, get_available_cc

__commands = ["mininet", "lan", "wan", "shared"]


def parse_args():
    ccs = get_available_cc()
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(description="Experiment run script", dest="command", required=True)
    parsers = {}
    for command in __commands:
        p = subparsers.add_parser(command)
        p.add_argument("-o", "--out", default="out", help="Output folder", type=str, dest="out")
        p.add_argument("-t", "--time", default=60, help="Test duration", type=int, dest="time")
        p.add_argument("--total-size", default=0, type=int, dest="total_size",
                       help="Total number of bytes to send (in MB). Cannot be  used together with time")
        p.add_argument("--debug", action="store_true", help="Add debug actions", dest="debug")
        p.add_argument("-c", "--cc1", default="bbr", help="Congestion control for h1", choices=ccs,
                       type=str, dest="cc1")
        p.add_argument("--rtt-range", nargs="+", help="RTT range", type=int, dest="rtt_range",
                       default=[5, 10, 25, 50, 75, 100, 150, 200])
        p.add_argument("--bw-range", nargs="+", help="Bandwidth range", type=int, dest="bw_range",
                       default=[10, 20, 50, 100, 250, 500, 750, 1000])
        p.add_argument("--size-range", nargs="+", help="Buffer size range", type=float, dest="size_range",
                       default=[0.1, 1, 10, 20, 50])
        p.add_argument("--loss-range", nargs="+", help="Loss range", type=float, dest="loss_range",
                       default=[0])
        p.add_argument("--skip", action="store_true", dest="skip", help="If set, skip existing files")
        parsers[command] = p

    # command specific ones
    for command in {"lan", "wan", "shared"}:
        p = parsers[command]
        p.add_argument("--remote-host", type=str, dest="remote_host", default="localhost", help="Remote host name")
        p.add_argument("--remote-user", type=str, dest="remote_user", default="mininet", help="Remote user name")

        if command == "shared":
            p.add_argument("--cc2", help="Congestion control for host2", choices=ccs, dest="cc2",
                           type=str, required=True)

    return parser.parse_known_args()


def get_base_commands():
    python = sys.executable
    # make sure bbr.py exists
    dirname = os.path.dirname(os.path.abspath(__file__))
    bbr = os.path.join(dirname, "bbr.py")
    assert os.path.exists(bbr)
    return ["sudo", python, bbr]


def get_run_command(configs, rtt, bw, size, loss):
    commands = ["--rtt", str(rtt), "--bw", bw, "-s", size,
                "-o", configs.out, "-c", configs.cc1, "-l", loss]
    if configs.command != "mininet":
        # need to set remote host as well
        commands += ["--remote-host", configs.remote_host]
        commands += ["--remote-user", configs.remote_user]
    if configs.debug:
        commands += ["--debug"]
    if configs.command == "shared":
        commands += ["--h2", "--h2-cc", configs.cc2]
    if configs.total_size == 0:
        commands += ["--total-size", configs.total_size]
    else:
        commands += ["-t", configs.time]
    commands = [str(c) for c in commands]
    return commands


def is_root():
    return os.geteuid() == 0


class DotDict:
    def __init__(self, dict_):
        self.__dict = dict_

    def __getattr__(self, item):
        return self.__dict[item]


def main():
    args, extra_args = parse_args()
    base_commands = get_base_commands()

    assert is_root(), f"{sys.argv[0]} has to be run with sudo"

    # make sire the directory exists
    if not os.path.exists(args.out):
        os.makedirs(args.out, exist_ok=True)

    # need to run all the configs
    for rtt in args.rtt_range:
        for bw in args.bw_range:
            for size in args.size_range:
                for loss in args.loss_range:
                    if args.skip:
                        filename = get_filename("h1", DotDict({"rtt": rtt, "bw": bw, "buffer_size": size, "loss": loss,
                                                               "output": args.out}))
                        if os.path.exists(filename):
                            print("Skipping", filename)
                            continue
                    # need to create a command
                    commands = base_commands + get_run_command(args, rtt, bw, size, loss) + extra_args
                    # call subprocess to run it
                    if args.debug:
                        print(*commands)
                    subprocess.check_call(commands, stderr=sys.stderr)


if __name__ == "__main__":
    main()
